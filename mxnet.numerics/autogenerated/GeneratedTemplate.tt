<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="Manager.ttinclude"#>  
<# var manager = Manager.Create(Host, GenerationEnvironment); #>  
<#@ output extension=".cs" #>

<# 
string templateFile = this.Host.ResolvePath(@"BaseTemplate.tt");
string templateContent = File.ReadAllText(templateFile);
 
List<Tuple<string, string>> genlist = new List<Tuple<string, string>>()
{ 
    Tuple.Create("Int32", "int"),
    Tuple.Create("Int64", "long")
};

#>
<# foreach (var genitem in genlist)
    {     
#>
<# 

        manager.StartNewFile($"{genitem.Item1}.generated.cs");
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using mxnet.numerics.single;
using mxnet.numerics.int32;
using mxnet.numerics.int64;
using mxnet.numerics.nbase;

<#
        TextTemplatingSession session = new TextTemplatingSession();
        session["classname"] = genitem.Item1;  
        session["typename"] = genitem.Item2;   

        var sessionHost = (ITextTemplatingSessionHost) this.Host;
        sessionHost.Session = session; 
        Engine engine = new Engine();
        string generatedContent = engine.ProcessTemplate(templateContent, this.Host);
        this.Write(generatedContent);  
 
        manager.EndBlock();

#>
<#   } #>
<# manager.Process(true); #>  